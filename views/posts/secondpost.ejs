<h3>Problem Solving and Being Lazy – What I Understand - 23/11/15</h3>
<p>From what I understand (it may not be entirely right), being lazy is where the software engineer only writes what is necessary. They only put in the smallest amount of effort possible to still get an excellent solution. This means that they don’t overcomplicate and overdo the project, so that the code is the most simple that it can be. Also it is about writing the code properly (I think), so that when you come back to it in the future, you can pick it up and know what has been written, and you are not adding in unnecessary features that are not required. Code should not be repeated – it should be taken out of the instances where it occurs, and a function should be made out of it (for example), so that you don’t have to write the same thing more than once. It is things like this that create a more efficient code. Being lazy may also be being more efficient now and doing more no so that you do less in the long run. </p>
<p>Problem Solving is more to do with how to actually solve the problem instead of how to engineer software efficiently. It is about asking questions and good practices, so that the project is aimed at the correct level, and that it does the job it is supposed to. From the talk, I gather that one of the most important parts of problem solving is that all of the questions are asked before starting, and during the process, so that the problem is clear, therefore the solution can be easily and properly written.</p>

